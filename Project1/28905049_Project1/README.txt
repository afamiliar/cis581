CIS 581 Fall 2017PROJECT 1DESCRIPTION OF FUNCTIONS:cannyEdge.m[E] = cannyEdge(I)Performs canny edge detection on image (I), outputs binary map (E) of edge detection results.            This function directly calls:      	findDerivatives.m      	visDerivatives.m      	nonMaxSup.m      	edgeLink.mfindDerivatives.m[Mag, Magx, Magy, Ori] = findDerivatives(I_gray)Uses Gaussian derivative to compute the x (Magx) and y (Magy) gradient magnitudes (i.e. magnitude of derivatives), and resulting gradient magnitude (Mag) and gradient orientation (i.e. orientation of derivatives) in degrees (Ori), of grayscale image (I_gray).2D Gaussian filter is 11 x 11 “pixels” with sigma of 2. nonMaxSup.m[M] = nonMaxSup(Mag, Ori)Uses non-maximal suppression to find local maxima along the gradient magnitude (Mag).Uses gradient orientation (Ori) to interpolate the magnitude between neighboring “pixels” along the gradient.Outputs binary map (M) of local maxima.edgeLink.m[E] = edgeLink(M, Mag, Ori)Uses hysteresis to link edges (local maxima as determined by nonMaxSup.m) along gradient.Defines upper and lower thresholds based on the coefficient of variance of the gradient magnitudes (standard deviation divided by mean of all non-zero “pixels”) and the mean of the gradient magnitudes across the entire image.Searches along high magnitude edges (“pixels” above upper threshold) in the gradient direction (and opposite direction) for neighboring strong/weak pixels.Outputs final edge detection result (E).	This function directly calls:		edgeFollow.medgeFollow.m[edges] = edgeFollow(edges, Mag, Ori, x, y, lowThresh)Follows along edge until the current “pixel” at location (x, y) is not above the lower threshold (lowThresh), or if a neighbor in the gradient direction is above the upper threshold, or if it reaches the border of the image.For the current “pixel”, three neighbors in the gradient direction (Ori) are assessed. The neighbor with the highest gradient magnitude (Mag) is marked as an edge and edge following continues for that neighbor.Outputs binary result of edge following process (edges).	This function directly calls:		quadrant.mquadrant.m[neighborhood] = quadrant(Ori, x, y)For the current “pixel” at location (x, y), outputs a binary mask (neighborhood) indicating the three neighbors in the direction of the gradient (Ori).Discretizes gradient orientations into quadrants.visDerivatives.mvisDerivatives(I_gray, Mag, Magx, Magy)	Visualizes results of findDerivatives.m for grayscale image (I_gray).Outputs plots of gradient magnitude (Mag, Magx, Magy) and gradient orientations.